function test() {
    (err ? __catch_block_2 : main_callback)(err, result)
}

exports.test = function(next, assert) {
    f(function(err, result) {
        assert.is_null(err)
        assert.equal(result, 5)
        assert.is_true(g_called)
        next()
    })
}

function f_() {
    try {
        throw new Error()
    } catch (err) {
        g_()
    }
    return 5
}

var g_called = false
function g_() {
    g_called = true
}

function f_model(callback) {
    __try_block_1()
    function __try_block_1() {
        var main_callback = callback
        var callback = function(err, result) {
            if (err) return __catch_block_2(err)
            return main_callback(null, result)
        }

        var err = new Error();
        if (callback) {
            return callback(err)
        } else {
            throw err
        };

        __rest_block_4()
    };
    function __catch_block_2(err) {
        g(function(err, __async_result_5) {
            if (err) {
                if (callback) {
                    return callback(err)
                } else {
                    throw err
                }
            };
            __async_result_5;

            __rest_block_4();
        });
    };
    function __rest_block_4() {
        if (callback) {
            return callback(null, 5)
        } else {
            return
        };
    };
};
