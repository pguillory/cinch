/*** Generated by streamline.js - DO NOT EDIT ***/
exports.test = function(next, assert) {
    pow(2, 3, function(err, result) {
        assert.equal(result, 8);
        next();
    });
};
function pow(base, exponent, callback) {
    function count(callback) {
        if (callback) {
            return callback(null, exponent--)
        } else {
            return
        };
    };
    function times(a, b, callback) {
        if (callback) {
            return callback(null, (a * b))
        } else {
            return
        };
    };
    var n = 1;
    setTimeout(__while_loop_1, 0);
    function __while_loop_1() {
        count(function(err, __async_result_2) {
            if (err) {
                if (callback) {
                    return callback(err)
                } else {
                    throw err
                }
            };
            if ((__async_result_2 > 0)) {
                times(n, base, function(err, __async_result_3) {
                    if (err) {
                        if (callback) {
                            return callback(err)
                        } else {
                            throw err
                        }
                    };
                    n = __async_result_3;
                    setTimeout(__while_loop_1, 0);
                });
            }
             else {
                if (callback) {
                    return callback(null, n)
                } else {
                    return
                };
            }
        ;
        });
    };
};
