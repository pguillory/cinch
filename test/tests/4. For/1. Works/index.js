/*** Generated by streamline.js - DO NOT EDIT ***/
exports.test = function(next, assert) {
    f(function(err, result) {
        assert.is_null(err);
        assert.equal(result, 5);
        assert.is_true(w_called);
        assert.is_true(x_called);
        assert.is_true(y_called);
        assert.is_true(z_called);
        next();
    });
};
function f(__callback_2) {
    __callback_2 = (__callback_2 || __throw_1);
    x(function(err, __result_3) {
        if (err) {
            return __callback_2(err)
        };
        __result_3;
        setTimeout(__while_loop_4, 0);
        function __while_loop_4() {
            y(function(err, __result_5) {
                if (err) {
                    return __callback_2(err)
                };
                if (__result_5) {
                    w(function(err, __result_6) {
                        if (err) {
                            return __callback_2(err)
                        };
                        __result_6;
                        z(function(err, __result_7) {
                            if (err) {
                                return __callback_2(err)
                            };
                            __result_7;
                            setTimeout(__while_loop_4, 0);
                        });
                    });
                }
                 else {
                    return __callback_2(null, 5);
                }
            ;
            });
        };
    });
};
var w_called = false;
function w(__callback_8) {
    __callback_8 = (__callback_8 || __throw_1);
    w_called = true;
    return __callback_8(null);
};
var x_called = false;
function x(__callback_9) {
    __callback_9 = (__callback_9 || __throw_1);
    x_called = true;
    return __callback_9(null);
};
var y_called = false;
function y(__callback_10) {
    __callback_10 = (__callback_10 || __throw_1);
    if (y_called) {
        return __callback_10(null, false);
    }
     else {
        y_called = true;
        return __callback_10(null, true);
    }
;
};
var z_called = false;
function z(__callback_11) {
    __callback_11 = (__callback_11 || __throw_1);
    z_called = true;
    return __callback_11(null);
};
function __throw_1(err) {
    if (err) {
        throw err;
    }
;
};
